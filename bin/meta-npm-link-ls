#!/usr/bin/env node

const fs = require('fs');
const getMetaFile = require('get-meta-file');
const debug = require("debug")("npm-meta");
const getPackageDependencies = require('../lib/getPackageDependencies');
const path = require('path');
const slash = require('slash');
const _ = require('lodash');

// a bit dicey, but getMetaFile also assumes process.cwd(), so we'll let it be for now.
const rootDir = process.cwd();

if (process.argv[2] === '--help') {
  return console.log(`\n  usage:\n\n    meta npm link-ls comma,separated,modules,to,filter\n`);
}

main(!!process.argv[2] ? process.argv[2].split(',') : undefined);



function main(whiteList) {
  var meta = getMetaFile();
  const metaLocation = path.join(process.cwd(), '.meta');
  const metaPackageJson = require(path.join(metaLocation, '..', 'package.json'));
  const packages = [];
  const projects = meta.projects;

  _.forEach(Object.keys(projects), folder => {
    const childPackageJson = require(path.join(metaLocation, '..', folder, 'package.json'));

    packages.push({
      name: childPackageJson.name,
      folder: path.join(metaLocation, '..', folder),
      dependencies: childPackageJson.dependencies,
      devDependencies: childPackageJson.devDependencies,
    });
  });

  packages.push({
    name: metaPackageJson.name,
    folder: path.join(metaLocation, '..'),
    dependencies: metaPackageJson.dependencies,
    devDependencies: metaPackageJson.devDependencies,
  });


  const dependencies = getPackageDependencies(packages);
  console.log(dependencies);

  console.log(`\nLinked child projects (intra-meta-repo dependency listing)\n`);
  const symlinks = {}
  const missing = [];
  dependencies.forEach((dep) => {
    const { sourceFolder, targetFolder, source: sourceName, target: targetName } = dep;
    const source = slash(path.relative(rootDir, sourceFolder));
    const target = slash(path.relative(rootDir, targetFolder));

    if (whiteList && !whiteList.includes(sourceName) && !whiteList.includes(targetName)) {
      // user asked to skip dependency list.
      return;
    }

    const dir = `${dep.targetFolder}/node_modules/${dep.source}`;
    const result = resolveSymLink(dir);

    if (result) {
      if (target in symlinks) {
        symlinks[target] = [...symlinks[target], source]
      } else {
        symlinks[target] = [source]
      }
    } else {
      missing.push(`missing ${target} (${dep.source})`);
    }
  });

  const srcWidth = Object.keys(symlinks).reduce((max, s) => Math.max(max, s.length), 0);
  Object.keys(symlinks).sort().forEach((src) => {
    symlinks[src].sort().forEach((tgt) => {
      console.log(`${src.padEnd(srcWidth, ' ')} <- ${tgt}`)
    })
  })
  missing.forEach((m) => console.log(m));
}

function resolveSymLink(dir) {
  const exists = fs.existsSync(dir);
  if (!exists) {
    debug(`missing ${dir}`);
    return;
  }
  const lstat1 = fs.lstatSync(dir);
  if (lstat1.isSymbolicLink()) {
    const destination = fs.readlinkSync(dir);
    const source = slash(path.relative(rootDir, dir));
    const target = slash(path.relative(rootDir, destination));
    debug(`${source} -> ${target}`);
    return {
      source,
      target
    }
  }
}