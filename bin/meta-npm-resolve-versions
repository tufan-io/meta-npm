#!/usr/bin/env node

/**
 * When a `meta` repo is updated, it causes a requirement to create a cascade of version updates.
 * For complex dependency trees, this can involve lot of steps/button-clicks, even if a CI bot is
 * used for the purpose.
 * 
 * A meta repo contains the intra-dpeendency tree. Once all changes are made, it makes a lot of sense
 * to test these changes on the developer machine, bump versions for individual packages as needed, 
 * and then, update all affected package.json files.
 *
 * This involves computing not just the intra-dependencies, but also a dependency-tree. 
 */
const fs = require('fs');
const getMetaFile = require('get-meta-file');
const toposort = require('toposort');
const semver = require("semver");
const getPackageDependencies = require('../lib/getPackageDependencies');
const path = require('path');
const slash = require('slash');
const _ = require('lodash');
const chalk = require('chalk');
const debug = require('debug')('meta-npm');
const cp = require("child_process");

// a bit dicey, but getMetaFile also assumes process.cwd(), so we'll let it be for now.
const rootDir = process.cwd();

if (process.argv[2] === '--help') {
  return console.log(`\n  usage:\n\n    meta npm link-ls\n`);
} else {
  main();
}

function relPath(dir) {
  return slash(path.relative(rootDir, dir));
}

function main() {
  var meta = getMetaFile();
  const metaLocation = path.join(process.cwd(), '.meta');
  const metaPackageJson = require(path.join(metaLocation, '..', 'package.json'));
  const packages = {};
  const projects = meta.projects;

  packages[metaPackageJson.name] = {
    name: metaPackageJson.name,
    folder: path.join(metaLocation, '..'),
    dependencies: metaPackageJson.dependencies,
    devDependencies: metaPackageJson.devDependencies,
    version: metaPackageJson.version,
    pkgJson: metaPackageJson,
  };

  _.forEach(Object.keys(projects), folder => {
    const childPackageJson = require(path.join(metaLocation, '..', folder, 'package.json'));

    packages[childPackageJson.name] = {
      name: childPackageJson.name,
      folder: path.join(metaLocation, '..', folder),
      dependencies: childPackageJson.dependencies,
      devDependencies: childPackageJson.devDependencies,
      version: childPackageJson.version,
      pkgJson: childPackageJson,
    };
  });

  // get the dependencies
  const dependencies = getPackageDependencies(Object.values(packages));
  debug(dependencies.map(({ pkgJson, ...dep }) => dep));
  // update linked versions
  const updates = {};
  dependencies.forEach((dep) => {
    const { source, target, nextVersion: _nextVersion, currVersion: _currVersion, dev, transitive } = dep;
    const { pkgJson, ...rest } = dep;
    const match = _currVersion.trim().match(/(<=|=|>=|\^|~)(.*)/);
    const comparator = match ? match[1] : '';
    const currVersion = match ? match[2] : _currVersion;
    if (currVersion[0].match(/[a-z]/)) {
      if (!Object.keys(updates).includes(target)) {
        updates[target] = [];
      }
      updates[target].push({ source, nextVersion: _nextVersion, currVersion: _currVersion, direction: "no-change" });
      return;
    }
    const direction = semver.lt(currVersion, _nextVersion)
      ? "upgrade"
      : semver.gt(currVersion, _nextVersion)
        ? "downgrade"
        : "no-change"
    // updates tracks the changes made, so we can provide feedback to the user.
    try {
      if ((!transitive && _nextVersion !== currVersion) ||
        !!dep.sourceFolder.match(/node_modules/)) {
        const nextVersion = `${comparator}${_nextVersion}`;
        if (dev) {
          packages[target].devDependencies[source] = nextVersion;
        } else {
          packages[target].dependencies[source] = nextVersion;
        }

        if (!Object.keys(updates).includes(target)) {
          updates[target] = [];
        }
        updates[target].push({ source, nextVersion, currVersion: _currVersion, direction });
        return;
      } else {
        const folder = dep.sourceFolder;
        const execOptions = { cwd: folder, encoding: 'utf8' };
        const branch = cp.execSync(`git rev-parse --abbrev-ref HEAD`, execOptions);
        // check remotes for any changes (restrict to our branch)
        cp.spawnSync(`git`, [`fetch`, `origin`, branch], execOptions);
        // now when we execute a status, we could be ahead or behind remote. 
        const status = cp.execSync("git status", execOptions);
        // there are local modifications, but the version hasn't yet been updated. 
        const unversionedChanges = !!status.match(/Changes not staged for commit|Untracked files|Changes to be committed|Your branch is ahead of|Your branch is behind/);
        if (unversionedChanges) {
          // the version are still identical. We cannot devine the next version. It is something the
          // developer has to commit. But we did detect changes - remote, local, committed or not.
          // This will impact dependents. So we'll track and provide feedback. 
          if (!Object.keys(updates).includes(target)) {
            updates[target] = [];
          }
          updates[target].push({ source, nextVersion: currVersion, currVersion, direction: "unversioned" });
          return;
        }
      }
    } catch (err) {
      console.log(JSON.stringify({ dep, err }, null, 2));
    }
  });

  // all updates have been applied. We can now save the modified `package.json`s
  // let's do so in a topologically sorted order. If we traverse this list top to bottom,
  // it'll require the fewest loops.

  const edges = dependencies.map(({ source, target }) => {
    return [source, target]
  })
  const nodes = Object.keys(packages);
  const sorted = toposort.array(nodes, edges).filter((n) => !!n);

  sorted.forEach((name, idx) => {
    const package = packages[name];
    const folder = package.folder;
    const execOptions = { cwd: folder, encoding: 'utf8' };
    const branch = cp.execSync(`git rev-parse --abbrev-ref HEAD`, execOptions)
    // check remotes for any changes (restrict to our branch)
    cp.spawnSync(`git`, [`fetch`, `origin`, branch], execOptions);
    // now when we execute a status, we could be ahead or behind remote. 
    const status = cp.execSync("git status", execOptions);
    const depUpdates = Object.keys(updates).includes(name);
    const localUpdates = depUpdates || !!status.match(/Changes not staged for commit|Changes to be committed/);
    const readyToPush = !depUpdates && !!status.match(/Your branch is ahead of/) && !!status.match(/nothing to commit, working tree clean/)
    const remoteUpdates = !!status.match(/Your branch is behind/);
    const update = (!localUpdates && !remoteUpdates && !readyToPush)
      ? '(NO updates)'
      : !remoteUpdates && readyToPush
        ? '(ready to publish)'
        : (remoteUpdates && !localUpdates)
          ? '(remote updates)'
          : (remoteUpdates && localUpdates)
            ? '(remote+local updates)'
            : depUpdates
              ? '(dependency updates)'
              : '(local updates)'
    // console.log(`dep:${depUpdates} local:${localUpdates} remote:${remoteUpdates} push:${readyToPush} update:${update}`);
    debug({ depUpdates, localUpdates, remoteUpdates, readyToPush, update });
    if (update === "(NO updates)") {
      console.log(chalk.green(`${idx}. ${chalk.underline(name)} ${chalk.dim(update)}`))
    } else if (update === "(ready to publish)") {
      console.log(chalk.yellow(`${idx}. ${chalk.underline(name)} ${chalk.dim(update)}`))
    } else {
      console.log(chalk.red(`${idx}. ${chalk.underline(name)} ${chalk.dim(update)}`))
    }

    if (depUpdates) {
      const pkgJson = package.pkgJson;
      fs.writeFileSync(`${folder}/package.json`, JSON.stringify(pkgJson, null, 2));
      const pkgUpdates = updates[name].map(({ source, nextVersion, currVersion, direction }) => {
        const verStr = chalk.dim(`${currVersion} -> ${nextVersion}`)
        return direction === 'upgrade'
          ? chalk.red(`      ${source}: ${verStr} ${chalk.dim(`(up)`)}`)
          : direction === 'downgrade'
            ? chalk.redBright(`      ${source}: ${verStr} ${chalk.dim(`(down)`)}`)
            : direction === "unversioned"
              ? chalk.magenta(`      ${source}: ${verStr} (pending new version)`)
              : chalk.green(`      ${source}: ${verStr}`);
      }).join("\n");
      console.log(pkgUpdates)
    }
  })
}
